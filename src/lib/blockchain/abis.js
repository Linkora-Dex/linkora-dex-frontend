export const CONTRACT_ABIS = {
	Router: [
		"function depositETH() external payable",
		"function depositToken(address token, uint256 amount) external",
		"function withdrawETH(uint256 amount) external",
		"function withdrawToken(address token, uint256 amount) external",
		"function swapTokens(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut) external payable returns (uint256)",
		"function createLimitOrder(address tokenIn, address tokenOut, uint256 amountIn, uint256 targetPrice, uint256 minAmountOut, bool isLong) external payable returns (uint256)",
		"function createStopLossOrder(address tokenIn, address tokenOut, uint256 amountIn, uint256 stopPrice, uint256 minAmountOut) external payable returns (uint256)",
		"function cancelOrder(uint256 orderId) external",
		"function selfExecuteOrder(uint256 orderId) external",
		"function openPosition(address token, uint256 collateralAmount, uint256 leverage, bool isLong) external payable returns (uint256)",
		"function closePosition(uint256 positionId) external",
		"function getBalance(address user, address token) external view returns (uint256)",
		"function getAvailableBalance(address user, address token) external view returns (uint256)",
		"function getAmountOut(uint256 amountIn, address tokenIn, address tokenOut) external view returns (uint256)",
		"function getPrice(address token) external view returns (uint256)",
		"function isOraclePriceValid(address token) external view returns (bool)",
		"function getUserOrders(address user) external view returns (uint256[] memory)",
		"function getUserPositions(address user) external view returns (uint256[] memory)",
		"function getOrder(uint256 orderId) external view returns (tuple(uint256 id, address user, address tokenIn, address tokenOut, uint256 amountIn, uint256 targetPrice, uint256 minAmountOut, uint8 orderType, bool isLong, bool executed, uint256 createdAt, bool selfExecutable))",
		"function getPosition(uint256 positionId) external view returns (tuple(uint256 id, address user, address token, uint256 collateralAmount, uint256 leverage, uint8 positionType, uint256 entryPrice, uint256 size, uint256 createdAt, bool isOpen))",
		"function shouldExecuteOrder(uint256 orderId) external view returns (bool)",
		"function getNextOrderId() external view returns (uint256)",
		"function getNextPositionId() external view returns (uint256)",
		"function getUserLPInfo(address user, address token) external view returns (uint256 contribution, uint256 sharePercentage, uint256 claimableFees, uint256 totalClaimed)",
		"function getClaimableLPFees(address user, address token) external view returns (uint256)",
		"function getLPStats(address token) external view returns (uint256 totalContributions, uint256 totalFeesAccumulated, uint256 totalFeesClaimed, uint256 availableFees)",
		"function claimLPFees(address token) external"
	],

	Pool: [
		"function getBalance(address user, address token) external view returns (uint256)",
		"function getAvailableBalance(address user, address token) external view returns (uint256)",
		"function ethBalance() external view returns (uint256)",
		"function totalTokenBalances(address token) external view returns (uint256)",
		"function swapTokens(address user, address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut) external returns (uint256)",
		"function getAmountOut(uint256 amountIn, address tokenIn, address tokenOut) external view returns (uint256)",
		"event Swap(address indexed user, address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut)",
		"event Deposit(address indexed user, address indexed token, uint256 amount)",
		"event Withdrawal(address indexed user, address indexed token, uint256 amount)",
		"event FeeDistributed(address indexed token, uint256 totalFee, uint256 timestamp)",
		"event FeeClaimed(address indexed user, address indexed token, uint256 amount)"
	],

	Trading: [
		"function createLimitOrder(address user, address tokenIn, address tokenOut, uint256 amountIn, uint256 targetPrice, uint256 minAmountOut, bool isLong) external returns (uint256)",
		"function createStopLossOrder(address user, address tokenIn, address tokenOut, uint256 amountIn, uint256 stopPrice, uint256 minAmountOut) external returns (uint256)",
		"function cancelOrder(address user, uint256 orderId) external",
		"function executeOrder(uint256 orderId) external",
		"function selfExecuteOrder(address executor, uint256 orderId) external",
		"function openPosition(address user, address token, uint256 collateralAmount, uint256 leverage, bool isLong) external returns (uint256)",
		"function closePosition(address user, uint256 positionId) external",
		"function liquidatePosition(uint256 positionId) external",
		"function getOrder(uint256 orderId) external view returns (tuple(uint256 id, address user, address tokenIn, address tokenOut, uint256 amountIn, uint256 targetPrice, uint256 minAmountOut, uint8 orderType, bool isLong, bool executed, uint256 createdAt, bool selfExecutable))",
		"function getPosition(uint256 positionId) external view returns (tuple(uint256 id, address user, address token, uint256 collateralAmount, uint256 leverage, uint8 positionType, uint256 entryPrice, uint256 size, uint256 createdAt, bool isOpen))",
		"function getUserOrders(address user) external view returns (uint256[] memory)",
		"function getUserPositions(address user) external view returns (uint256[] memory)",
		"function shouldExecuteOrder(uint256 orderId) external view returns (bool)",
		"function nextOrderId() external view returns (uint256)",
		"function nextPositionId() external view returns (uint256)",
		"event OrderCreated(uint256 indexed orderId, address indexed user, address tokenIn, address tokenOut, uint256 amountIn)",
		"event OrderExecuted(uint256 indexed orderId, address indexed executor, uint256 amountOut)",
		"event OrderCancelled(uint256 indexed orderId, address indexed user)",
		"event PositionOpened(uint256 indexed positionId, address indexed user, address token, uint256 size)",
		"event PositionClosed(uint256 indexed positionId, address indexed user, int256 pnl)",
		"event PositionLiquidated(uint256 indexed positionId, address indexed user, address indexed liquidator, int256 pnl)"
	],

	Oracle: [
		"function getPrice(address token) external view returns (uint256)",
		"function isPriceValid(address token) external view returns (bool)",
		"function isPriceStale(address token) external view returns (bool)",
		"function updatePrice(address token, uint256 newPrice) external",
		"function batchUpdatePrices(address[] calldata tokens, uint256[] calldata newPrices) external",
		"function getLatestPrices(address[] calldata tokens) external view returns (uint256[] memory priceList, uint256[] memory timestamps)",
		"function getTokenPriceInfo(address token) external view returns (uint256 currentPrice, uint256 lastUpdate, bool isValid, bool isStale, uint256 historicalCount)",
		"event PriceUpdated(address indexed token, uint256 oldPrice, uint256 newPrice, uint256 timestamp)"
	]
};